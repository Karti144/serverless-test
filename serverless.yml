org: karti144
app: serverless-test
service: serverless-test
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}

custom: 
  CREATE_CUSTOMER: create_customer

  appSync: 
    name: appsync-create-customer-apis
    authenticationType: API_KEY
    mappingTemplates:
      - type: Mutation
        field: createCustomer
        dataSource: createCustomer
        request: false
        response: false

      - type: Mutation
        field: updateCustomer
        dataSource: updateCustomer
        request: false
        response: false

      - type: Mutation
        field: deleteCustomer
        dataSource: deleteCustomer
        request: false
        response: false

      - type: Query
        field: getCustomer
        dataSource: getCustomer
        request: false
        response: false

    dataSources:
      - type: AWS_LAMBDA
        name: createCustomer
        config:
          functionName: createCustomer

      - type: AWS_LAMBDA
        name: updateCustomer
        config:
          functionName: updateCustomer
      - type: AWS_LAMBDA
        name: deleteCustomer
        config:
          functionName: deleteCustomer          

      - type: AWS_LAMBDA
        name: getCustomer
        config:
          functionName: getCustomer

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get

  createCustomer:
    handler: CreateCustomer.createCustomer
    events:
      - httpApi:
          path: /create
          method: post
  updateCustomer:
    handler: updateCustomer.update
    events:
      - httpApi:
          path: /update
          method: put
  deleteCustomer:
    handler: deleteCustomer.delete
    events:
      - httpApi:
          path: /delete
          method: post
  getCustomer:
    handler: getCustomer.get
    events:
      - httpApi:
          path: /get
          method: get

resources:
  Resources:
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:service}-customerTable-${sls:stage}

plugins:
   - serverless-appsync-plugin
   - serverless-pseudo-parameters
